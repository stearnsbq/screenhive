generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}


model User{
  id Int @id @default(autoincrement())
  username String @db.VarChar(50) @unique
  email String @db.VarChar(100) @unique
  password String @db.VarChar(255)
  dob DateTime @db.Date
  registered DateTime @db.Date
  verified Boolean @db.Boolean @default(false)
  twoFactorEnabled Boolean @db.Boolean @default(false)
  lastLogin DateTime @db.Timestamp()
  avatar String? @db.VarChar(255)
  premiumSubscriptions PremiumSubscription[]
  accountOffenses AccountOffense[]
  reports Report[] @relation("reporter")
  reportsAgainstUser Report[] @relation("reportee")
  roles Role[] 
}

model RevokedToken{
  token String @id @db.VarChar(255)
  expiry DateTime @db.Timestamp()
}

model PremiumSubscription {
  id Int  @id @default(autoincrement())
  userId Int @db.Integer
  start DateTime @db.Date
  end DateTime @db.Date
  recurring Boolean @db.Boolean
  user User @relation(fields: [userId], references: [id])
}

model AccountOffense {
  id Int  @id @default(autoincrement())
  userId Int @db.Integer
  type String @db.VarChar(50)
  description String @db.Text
  start DateTime @db.Date
  end DateTime @db.Date
  user User @relation(fields: [userId], references: [id])
}

model Report{
  id Int @id @default(autoincrement())
  reporter Int @db.Integer
  reportee Int @db.Integer
  type String @db.VarChar(50)
  reason String @db.Text
  reporterUser User @relation("reporter", fields: [reporter], references: [id])
  reporteeUser User @relation("reportee", fields: [reportee], references: [id])
}


model Role{
  id Int @id
  name String @db.VarChar(50)
  users User[] 
}


model Permission{
  id Int @id
  name String @db.VarChar(50)
}